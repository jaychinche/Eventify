<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Eventify</title>
    <link href="img/website.jpeg" rel="icon">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">
    <link href="css/bootstrap.min.css" rel="stylesheet">
    <link href="css/style.css" rel="stylesheet">
    <style>
        /* General Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            background-color: rgb(36, 6, 126)5;
        }

        .bordered-div {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            background-color: #fff;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .chat-container {
            height: 400px;
            overflow-y: auto;
            border: 1px solid #ccc;
            border-radius: 8px;
            padding: 10px;
            background: #fafafa;
            margin-bottom: 20px;
        }

        .typing-container {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .typing-content {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .typing-textarea {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        textarea#chat-input {
            flex: 1;
            resize: none;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            outline: none;
        }

        #send-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 50px;
            height: 50px;
            background-color: #007bff;
            color: #fff;
            border-radius: 50%;
            cursor: pointer;
            font-size: 24px;
        }

        .typing-controls {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        .material-symbols-rounded {
            cursor: pointer;
            font-size: 24px;
        }

        .chat {
            display: flex;
            margin-bottom: 10px;
            align-items: flex-start;
        }

        .chat.outgoing {
            justify-content: flex-end;
        }

        .chat-content {
            max-width: 70%;
            padding: 10px;
            border-radius: 8px;
            background:  linear-gradient(to right, #4e73df, #4e73df);;
            color: #fff;
            word-wrap: break-word;
        }

        .chat.outgoing .chat-content {
            background: #6c757d;
        }

        .chat-details img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .default-text {
            text-align: center;
            color: #999;
            margin-top: 150px;
        }

        .typing-animation {
            display: flex;
            gap: 4px;
            justify-content: center;
            align-items: center;
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #ccc;
            animation: blink 1.4s infinite;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes blink {
            0%, 80%, 100% {
                opacity: 0;
            }
            40% {
                opacity: 1;
            }
        }
    </style>
</head>
<body>
    <h1><a href="https://eventify-1-ixhs.onrender.com/dashboard"
    class="btn btn-primary-gradient ">Back
    </a></h1>
   
    <div class="bordered-div">
      
    
        <!-- Chat Container -->
        <div class="chat-container"></div>

        <!-- Typing Container -->
        <div class="typing-container">
            <div class="typing-content">
                <div class="typing-textarea">
                    <textarea id="chat-input" spellcheck="false" placeholder="Enter a prompt here" required></textarea>
                    <span id="send-btn" class="material-symbols-rounded btn btn-primary-gradient">send</span>
                </div>
                <div class="typing-controls">
                    <span id="theme-btn" class="material-symbols-rounded">light_mode</span>
                    <span id="delete-btn" class="material-symbols-rounded">delete</span>
                </div>
            </div>
        </div>
    </div>

    <script>
        // ChatGPT Clone JavaScript Code
        const API_URL = "/bot"; // Update to use the backend route
        const chatInput = document.querySelector("#chat-input");
        const sendButton = document.querySelector("#send-btn");
        const chatContainer = document.querySelector(".chat-container");
        const themeButton = document.querySelector("#theme-btn");
        const deleteButton = document.querySelector("#delete-btn");

        let userText = null;

        const loadDataFromLocalstorage = () => {
            const themeColor = localStorage.getItem("themeColor");
            document.body.classList.toggle("light-mode", themeColor === "light_mode");
            themeButton.innerText = document.body.classList.contains("light-mode") ? "dark_mode" : "light_mode";
            const defaultText = `<div class="default-text">
                                    <h1>EventifyBot <i class="fa fa-robot fa-1x" style="color: rgb(249, 200, 4);"></i></h1>
                                    <p>Start a conversation and explore the power of AI.<br> Your chat history will be displayed here.</p>
                                </div>`;
            chatContainer.innerHTML = localStorage.getItem("all-chats") || defaultText;
            chatContainer.scrollTo(0, chatContainer.scrollHeight);
        };

        const createChatElement = (content, className) => {
            const chatDiv = document.createElement("div");
            chatDiv.classList.add("chat", className);
            chatDiv.innerHTML = content;
            return chatDiv;
        };

        const getChatResponse = async (incomingChatDiv) => {
            const pElement = document.createElement("p");

            try {
                const response = await fetch(API_URL, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ content: userText })
                });
                const data = await response.json();
                pElement.textContent = data.response.trim();
            } catch (error) {
                pElement.classList.add("error");
                pElement.textContent = "Oops! Something went wrong while retrieving the response. Please try again.";
            }

            incomingChatDiv.querySelector(".typing-animation").remove();
            incomingChatDiv.querySelector(".chat-details").appendChild(pElement);
            localStorage.setItem("all-chats", chatContainer.innerHTML);
            chatContainer.scrollTo(0, chatContainer.scrollHeight);
        };

        const handleOutgoingChat = () => {
            userText = chatInput.value.trim();
            if (!userText) return;

            chatInput.value = "";
            chatInput.style.height = "40px";

            const html = `<div class="chat-content">
                            <div class="chat-details">
                                <img src="images/user.jpg" alt="user-img">
                                <p>${userText}</p>
                            </div>
                        </div>`;

            const outgoingChatDiv = createChatElement(html, "outgoing");
            chatContainer.querySelector(".default-text")?.remove();
            chatContainer.appendChild(outgoingChatDiv);
            chatContainer.scrollTo(0, chatContainer.scrollHeight);
            setTimeout(showTypingAnimation, 500);
        };

        const showTypingAnimation = () => {
            const html = `<div class="chat-content">
                            <div class="chat-details">
                                <img src="img/Screenshot 2025-01-11 at 3.08.34â€¯PM.png" alt="chatbot-img">
                                <div class="typing-animation ">
                                    <div class="typing-dot" style="--delay: 0.2s"></div>
                                    <div class="typing-dot" style="--delay: 0.3s"></div>
                                    <div class="typing-dot" style="--delay: 0.4s"></div>
                                </div>
                            </div>
                        </div>`;
            const incomingChatDiv = createChatElement(html, "incoming");
            chatContainer.appendChild(incomingChatDiv);
            chatContainer.scrollTo(0, chatContainer.scrollHeight);
            getChatResponse(incomingChatDiv);
        };

        deleteButton.addEventListener("click", () => {
            if (confirm("Are you sure you want to delete all the chats?")) {
                localStorage.removeItem("all-chats");
                loadDataFromLocalstorage();
            }
        });

        themeButton.addEventListener("click", () => {
            document.body.classList.toggle("light-mode");
            localStorage.setItem("themeColor", themeButton.innerText);
            themeButton.innerText = document.body.classList.contains("light-mode") ? "dark_mode" : "light_mode";
        });

        sendButton.addEventListener("click", handleOutgoingChat);

        chatInput.addEventListener("keydown", (e) => {
            if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault();
                handleOutgoingChat();
            }
        });

        loadDataFromLocalstorage();
    </script>
</body>
</html>
